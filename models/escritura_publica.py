# generated by datamodel-codegen:
#   filename:  temp_schema.json
#   timestamp: 2025-08-03T18:50:06+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Annotated
from datetime import date

from pydantic import BaseModel, Extra, Field, field_validator
from pydantic.functional_validators import AfterValidator
import re

# Validador de data no formato ISO YYYY-MM-DD
def validate_iso_date(v: str) -> str:
    pattern = r'^\d{4}-\d{2}-\d{2}$'
    if not re.match(pattern, v):
        raise ValueError(f'A data deve estar no formato YYYY-MM-DD. Valor recebido: {v}')
    return v

# Tipo anotado para data ISO
ISODateString = Annotated[str, AfterValidator(validate_iso_date)]

class ClausulasCertido(BaseModel):
    class Config:
        extra = Extra.forbid

    tipo_certidao: str = Field(
        ...,
        description='Natureza da certidão (ex.: Ônus Reais, Débitos Municipais, Regularidade Fiscal).',
    )
    descricao: str = Field(
        ...,
        description='Conteúdo integral ou resumo fiel da cláusula, conforme redação do tabelião que comprove a certidão apresentada.',
    )


class ClausulasDeclaracoesAutorizaco(BaseModel):
    class Config:
        extra = Extra.forbid

    tipo: str = Field(
        ...,
        description='Categoria da cláusula (Declaração, Autorização, Ratificação, Renúncia etc.).',
    )
    descricao: str = Field(
        ...,
        description='Conteúdo integral ou resumo fiel da cláusula, conforme redação do tabelião.',
    )


class Endereco(BaseModel):
    class Config:
        extra = Extra.forbid

    cep: str = Field(
        ..., description='Código de Endereçamento Postal, com ou sem hífen.'
    )
    tipo_logradouro: str = Field(
        ..., description='Prefixo do logradouro (Rua, Av., Trav., Rod., etc.).'
    )
    logradouro: str = Field(..., description='Nome do logradouro propriamente dito.')
    numero: str = Field(..., description='Número predial. Use “s/n” se não existir.')
    unidade: str = Field(
        ..., description='Unidade interna, sala, apartamento, box, pavilhão, etc.'
    )
    complemento: str = Field(
        ..., description='Qualquer referência adicional (lote, quadra, bloco).'
    )
    bairro: str = Field(..., description='Bairro, distrito ou zona.')
    cidade: str = Field(
        ...,
        description='Município e, opcionalmente, UF (quando não houver outro campo UF separado).',
    )
    endereco_completo: str = Field(
        ...,
        description='Representação concatenada do endereço, caso conste na escritura como um único bloco de texto.',
    )


class TipoAto(Enum):
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_10 = 10
    integer_11 = 11
    integer_12 = 12
    integer_13 = 13
    integer_14 = 14
    integer_15 = 15
    integer_16 = 16
    integer_17 = 17


class PrimeiraAquisicao(Enum):
    field_0 = '0'
    field_1 = '1'


class PagoEmEspecie(Enum):
    field_0 = '0'
    field_1 = '1'


class TipoImovel(Enum):
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4
    integer_5 = 5
    integer_6 = 6
    integer_7 = 7
    integer_8 = 8
    integer_9 = 9
    integer_10 = 10
    integer_11 = 11
    integer_12 = 12
    integer_13 = 13
    integer_14 = 14
    integer_15 = 15
    integer_16 = 16
    integer_17 = 17
    integer_18 = 18
    integer_19 = 19
    integer_20 = 20
    integer_21 = 21
    integer_22 = 22
    integer_23 = 23
    integer_24 = 24
    integer_25 = 25
    integer_26 = 26
    integer_27 = 27
    integer_28 = 28
    integer_29 = 29
    integer_30 = 30
    integer_31 = 31
    integer_32 = 32
    integer_33 = 33


class Imovel(BaseModel):
    class Config:
        extra = Extra.forbid

    cnm: str = Field(
        ...,
        description='Código Nacional de Matrícula – padrão de 20 dígitos, se já atribuído ao cartório.',
    )
    localizacao: int = Field(
        ...,
        description='1 = imóvel urbano; 2 = imóvel rural; outros valores conforme legislação local.',
    )
    descricao_localizacao: str = Field(
        ...,
        description='Texto livre indicando quadra, lote, fração, confrontações ou referências complementares.',
    )
    numero_matricula: int = Field(
        ...,
        description='Número da matrícula no Cartório de Registro de Imóveis competente.',
    )
    iptu: str = Field(..., description='Inscrição municipal de IPTU, quando existente.')
    ccir: str = Field(..., description='Cadastro no INCRA (CCIR) para imóveis rurais.')
    nirf: str = Field(..., description='Número do NIRF (Receita Federal) se informado.')
    tipo_imovel: TipoImovel = Field(
        ...,
        description='Código padronizado de tipologia imobiliária (conforme tabela arquivo listas_controlada.md).',
    )
    descricao_tipo_imovel: str = Field(
        ...,
        description='Descrição textual da tipologia – útil quando a escritura contém termo não previsto na lista.',
    )
    descricao: str = Field(
        ...,
        description='Descrição completa da matrícula transcrita na escritura (medidas, confrontações, benfeitorias).',
    )
    valor_avaliacao: float = Field(
        ...,
        description='Valor de avaliação específico para este imóvel, se houver mais de um.',
    )
    valor_atribuido: float = Field(
        ...,
        description='Valor atribuído ao imóvel para fins de partilha ou outro cálculo.',
    )
    endereco: Endereco


class Qualificacao(Enum):
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4
    integer_5 = 5
    integer_6 = 6
    integer_7 = 7
    integer_8 = 8
    integer_9 = 9
    integer_10 = 10
    integer_11 = 11
    integer_12 = 12
    integer_13 = 13
    integer_14 = 14


class Parte(BaseModel):
    class Config:
        extra = Extra.forbid

    qualificacao: Qualificacao = Field(
        ...,
        description='Código da função desempenhada no ato (conforme tabela arquivo listas_controlada.md).',
    )
    descricao_qualificacao: str = Field(
        ...,
        description="Expressão escrita na escritura para a qualificação (ex.: 'OUTORGANTE VENDEDOR').",
    )
    cpf_cnpj: str = Field(
        ..., description='CPF (pessoa física) ou CNPJ (pessoa jurídica) da parte.'
    )
    fracao: float = Field(
        ...,
        description='Percentual ou fração ideal da parte no negócio (0-1), ex.: 0.5 representa metade.',
    )


class EstadoCivil(Enum):
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4
    integer_5 = 5
    integer_6 = 6
    integer_7 = 7
    integer_8 = 8
    integer_9 = 9
    integer_10 = 10
    integer_11 = 11
    integer_12 = 12
    integer_13 = 13
    integer_14 = 14
    integer_15 = 15
    integer_16 = 16
    integer_17 = 17
    integer_18 = 18
    integer_19 = 19
    integer_20 = 20
    integer_21 = 21


class CapacidadeCivil(Enum):
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3


class RegimeBens(Enum):
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4
    integer_5 = 5
    integer_6 = 6
    integer_7 = 7
    integer_8 = 8
    integer_9 = 9
    integer_10 = 10
    integer_11 = 11
    integer_12 = 12
    integer_13 = 13
    integer_14 = 14
    integer_15 = 15
    integer_16 = 16
    integer_17 = 17
    integer_18 = 18
    integer_19 = 19
    integer_20 = 20
    integer_21 = 21
    integer_22 = 22
    integer_23 = 23
    integer_24 = 24
    integer_25 = 25
    integer_26 = 26
    integer_27 = 27
    integer_28 = 28
    integer_29 = 29
    integer_30 = 30
    integer_31 = 31
    integer_32 = 32
    integer_33 = 33
    integer_34 = 34
    integer_35 = 35
    integer_36 = 36
    integer_37 = 37
    integer_38 = 38
    integer_39 = 39
    integer_40 = 40
    integer_41 = 41
    integer_42 = 42
    integer_43 = 43
    integer_44 = 44
    integer_45 = 45
    integer_46 = 46
    integer_47 = 47
    integer_48 = 48
    integer_49 = 49
    integer_50 = 50
    integer_51 = 51
    integer_52 = 52
    integer_53 = 53
    integer_54 = 54
    integer_55 = 55
    integer_56 = 56
    integer_57 = 57


class UniaoEstavel(Enum):
    field_0 = '0'
    field_1 = '1'


class TipoRegistro(Enum):
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4
    integer_5 = 5
    integer_6 = 6


class Representante(BaseModel):
    class Config:
        extra = Extra.forbid

    nome_representante: str = Field(..., description='Nome completo do representante.')
    cpf_representante: str = Field(..., description='CPF do representante.')
    cnpj_representado: str = Field(
        ..., description='CNPJ da empresa representada, quando aplicável.'
    )
    numero_instrumento: str = Field(
        ..., description='Número do instrumento de mandato/procuraçao ou ata.'
    )
    tipo_registro: TipoRegistro = Field(
        ...,
        description='Tipo de instrumento de representação – conforme tabela arquivo listas_controlada.md.',
    )
    orgao: str = Field(
        ...,
        description='Órgão ou cartório onde o instrumento foi registrado (Junta Comercial, RCPJ, etc.).',
    )
    forma_registro: str = Field(
        ..., description='Forma do registro (digital, físico, microfilme...).'
    )
    numero_livro: str = Field(
        ..., description='Livro do cartório onde consta o registro.'
    )
    folha: int = Field(..., description='Folha no livro do cartório.')
    numero_registro: int = Field(
        ..., description='Número sequencial do registro ou ato.'
    )
    data_registro: ISODateString =  Field(
        ..., description='Data em que o instrumento foi protocolado/registrado.'
    )


class EnquadramentoFinanciamento(Enum):
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4
    integer_5 = 5


class SistemaAmortizacao(Enum):
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4
    integer_5 = 5


class OrigemRecursos(Enum):
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4
    integer_5 = 5
    integer_6 = 6


class Financiamento(BaseModel):
    class Config:
        extra = Extra.forbid

    prazo_carencia: int = Field(
        ...,
        description='Período (em meses) entre a assinatura e o início da amortização.',
    )
    enquadramento_financiamento: EnquadramentoFinanciamento = Field(
        ...,
        description='Categoria regulatória do financiamento (SFH, SFI, PMCMV...) – conforme tabela arquivo listas_controlada.md.',
    )
    descricao_enquadramento_financiamento: str = Field(
        ..., description='Texto literal constante na escritura para o enquadramento.'
    )
    sistema_amortizacao: SistemaAmortizacao = Field(
        ...,
        description='Sistema de amortização (SAC, Price, SACRE...) – conforme tabela arquivo listas_controlada.md.',
    )
    descricao_sistema_amortizacao: str = Field(
        ..., description='Descrição textual do sistema, se for personalizado.'
    )
    origem_recursos: OrigemRecursos = Field(
        ...,
        description='Fonte dos recursos (FGTS, SBPE, FAR...) – conforme tabela arquivo listas_controlada.md.',
    )
    descricao_origem_recursos: str = Field(
        ..., description='Texto completo da cláusula sobre origem de recursos.'
    )
    juros_anual_nominal: float = Field(
        ..., description='Taxa nominal de juros ao ano, sem capitalização.'
    )
    juros_anual_efetivo: float = Field(
        ..., description='Taxa efetiva anual, já considerada capitalização.'
    )
    juros_mensal_nominal: float = Field(
        ..., description='Taxa nominal mensal, quando discriminada.'
    )
    juros_mensal_efetivo: float = Field(
        ..., description='Taxa efetiva mensal, caso conste.'
    )
    prazo_amortizacao: int = Field(
        ..., description='Prazo total (meses) acordado para amortização.'
    )
    valor_primeira_parcela: float = Field(
        ..., description='Valor a ser pago na primeira prestação.'
    )
    data_primeira_parcela: ISODateString =  Field(
        ..., description='Data de vencimento da primeira prestação.'
    )
    destino_financiamento: str = Field(
        ...,
        description='Finalidade dos recursos (aquisição, construção, reforma, etc.).',
    )
    forma_de_pagamento: str = Field(
        ...,
        description='Modalidade de pagamento estipulada (boleto, débito em conta, etc.).',
    )


class Isencao(Enum):
    field_0 = '0'
    field_1 = '1'


class ImpostoTransmissao(BaseModel):
    class Config:
        extra = Extra.forbid

    isencao: Isencao = Field(
        ...,
        description='Indica se houve algum tipo de isenção ou imunidade do imposto (1 = isento; 0 = integralmente recolhido).',
    )
    inscricao: str = Field(
        ..., description='Número de inscrição ou referência da guia emitida pelo fisco.'
    )
    guia: str = Field(
        ...,
        description='Número de identificação da guia de pagamento, se diverso da inscrição.',
    )
    valor: float = Field(
        ...,
        description='Valor pago ou devido, expresso em moeda corrente, com centavos.',
    )


class Impostos(BaseModel):
    class Config:
        extra = Extra.forbid

    imposto_transmissao: ImpostoTransmissao


class Negocio(BaseModel):
    class Config:
        extra = Extra.forbid

    sequencial: int = Field(
        ...,
        description='Número ordinal para vincular partes, imóveis e impostos a este negócio. Começa em 1 e cresce por ato adicionado.',
    )
    tipo_ato: TipoAto = Field(
        ...,
        description='Código padronizado do ato negocial (conforme tabela arquivo listas_controlada.md).',
    )
    descricao_tipo_ato: str = Field(
        ...,
        description='Redação literal do tipo de ato, caso a escritura utilize nomenclatura diferente do padrão.',
    )
    valor_transmissao: float = Field(
        ...,
        description='Valor declarado para fins de ITBI/ITCMD ou preço de venda (campo monetário, 2 casas decimais).',
    )
    valor_venal: float = Field(
        ...,
        description='Valor venal atribuído pela municipalidade ou constante em referência fiscal.',
    )
    valor_financiamento: float = Field(
        ..., description='Montante de crédito concedido pelo agente financiador.'
    )
    valor_avaliacao: float = Field(
        ...,
        description='Valor apurado por laudo de avaliação (quando citado na escritura).',
    )
    valor_leilao: float = Field(
        ...,
        description='Preço de arrematação se o imóvel foi adquirido em leilão judicial ou extrajudicial.',
    )
    recursos_proprios: float = Field(
        ..., description='Parte do preço paga com recursos próprios do adquirente.'
    )
    recursos_financiados: float = Field(
        ..., description='Parte do preço coberta por financiamento ou consórcio.'
    )
    primeira_aquisicao: PrimeiraAquisicao = Field(
        ...,
        description='Indicador se o adquirente declarou tratar-se de primeira aquisição residencial (1 = sim; 0 = não).',
    )
    pago_em_especie: PagoEmEspecie = Field(
        ...,
        description='Marcação de pagamento em dinheiro vivo (1 = houve; 0 = não houve).',
    )
    valor_pago_em_especie: float = Field(
        ..., description='Valor efetivamente pago em espécie, quando declarado.'
    )
    observacoes_gerais: str = Field(
        ...,
        description='Observações livres do tabelião ou cláusulas especiais ligadas ao ato.',
    )
    imoveis: List[Imovel] = Field(
        ...,
        description='Todos os imóveis que estão sendo transmitidos ou dados em garantia neste ato.',
    )
    partes: List[Parte] = Field(
        ...,
        description='Somente as partes com participação direta neste negócio (vende, compra, dá em garantia etc.).',
    )


class ParteNegocio(BaseModel):
    class Config:
        extra = Extra.forbid

    sequencial_negocio: str = Field(
        ...,
        description='Sequência(s) de negócio(s) em que a parte atua. Permite múltiplos valores separados por vírgula quando a mesma pessoa participa de mais de um ato.',
    )
    nome: str = Field(..., description='Nome empresarial ou civil completo da parte.')
    cpf_cnpj: str = Field(..., description='CPF ou CNPJ, conforme a natureza da parte.')
    genero: int = Field(
        ...,
        description='Código de gênero, se adotada lista local (1 = masculino, 2 = feminino, etc.).',
    )
    estado_civil: EstadoCivil = Field(
        ...,
        description='Estado civil da parte – conforme tabela arquivo listas_controlada.md.',
    )
    descricao_estado_civil: str = Field(
        ...,
        description="Texto literal do estado civil constante na escritura, útil para nuances (ex.: 'divorciada em regime de ...').",
    )
    capacidade_civil: CapacidadeCivil = Field(
        ...,
        description='Condição de capacidade (capaz, relativamente capaz, incapaz) – conforme tabela arquivo listas_controlada.md.',
    )
    descricao_capacidade_civil: str = Field(
        ..., description='Descrição textual, incluindo eventual curatela ou tutela.'
    )
    regime_bens: RegimeBens = Field(
        ...,
        description='Regime de bens do casamento/união – conforme tabela arquivo listas_controlada.md.',
    )
    descricao_regime_bens: str = Field(
        ...,
        description="Forma literal informada (ex.: 'comunhão parcial de bens na vigência da Lei 6.515/77').",
    )
    data_casamento: ISODateString =  Field(
        ..., description='Data do casamento, se mencionada.'
    )
    data_nascimento: ISODateString =  Field(
        ..., description='Data de nascimento ou constituição (para PJ).'
    )
    numero_pacto: str = Field(
        ..., description='Número do registro do pacto antenupcial.'
    )
    data_pacto: ISODateString =  Field(
        ..., description='Data de assinatura do pacto antenupcial.'
    )
    local_registro_pacto: str = Field(
        ..., description='Cartório onde o pacto foi registrado.'
    )
    instrumento_pacto: str = Field(
        ..., description='Tipo do instrumento (Escritura, Contrato, Sentença).'
    )
    uniao_estavel: UniaoEstavel = Field(
        ..., description='Marcador de união estável reconhecida (1 = sim; 0 = não).'
    )
    profissao: int = Field(
        ...,
        description='Código de profissão ocupada pela parte (lista ainda não fornecida).',
    )
    endereco: Endereco
    cpf_conjuge: str = Field(
        ..., description='CPF do cônjuge ou companheiro, quando citado.'
    )
    email: str = Field(
        ..., description='E-mail informado na escritura (campo facultativo).'
    )
    nome_filiacao1: str = Field(
        ..., description='Nome do primeiro genitor (filiação declarada).'
    )
    nome_filiacao2: str = Field(..., description='Nome do segundo genitor.')
    representantes: List[Representante] = Field(
        ...,
        description='Representantes legais, mandatários ou administradores que atuaram pela parte.',
    )


class Escritura(BaseModel):
    class Config:
        extra = Extra.forbid

    titulo: str = Field(
        ...,
        description='Expressão literal que identifica a espécie do instrumento – ex.: “Escritura Pública de Compra e Venda com Alienação Fiduciária em Garantia”.',
    )
    data: ISODateString =  Field(
        ...,
        description='Data exata da lavratura (assinatura) da escritura, sempre no padrão ISO YYYY-MM-DD.',
    )
    livro: str = Field(
        ...,
        description='Número, letra ou código do livro notarial em que o ato foi lançado – p.ex. “Livro 234”, “Livro B-42”, “Livro 3-Notas”.',
    )
    folha: str = Field(
        ...,
        description='Intervalo ou identificação das folhas dentro do livro, tal como “fls. 45-48” ou somente “46”.',
    )
    negocios: List[Negocio] = Field(
        ...,
        description='Coleção de atos que compõem a escritura (um mesmo título pode reunir compra e venda, financiamento, doação etc.). Cada item segue a classe Negocio.',
    )
    partes_negocio: List[ParteNegocio] = Field(
        ...,
        description='Lista única com todas as pessoas físicas ou jurídicas que aparecem na escritura, sem duplicidade de nomes, detalhando seus dados pessoais, estado civil, endereço e eventuais representantes.',
    )
    financiamento: Financiamento
    impostos: Impostos = Field(
        ...,
        description='Bloco dedicado a tributos incidentes sobre a transmissão patrimonial (ITBI, ITCMD ou equivalentes).',
    )
    clausulas_certidoes: List[ClausulasCertido] = Field(
        ...,
        description='Relação de certidões juntadas (matrícula atualizada, certidão de ônus, certidões negativas pessoais, ambientais, etc.).',
    )
    clausulas_declaracoes_autorizacoes: List[ClausulasDeclaracoesAutorizaco] = Field(
        ...,
        description='Qualquer cláusula declaratória ou autorizativa (ex.: declarações fiscais, anuência conjugal, autorização de averbação).',
    )


class EscrituraPublicaSchema(BaseModel):
    class Config:
        extra = Extra.forbid

    escritura: Escritura = Field(
        ...,
        description='Bloco-raiz onde cada chave reflete um subtítulo clássico da escritura. Serve como contêiner para todas as demais classes (NEGOCIO, PARTE, IMOVEL etc.).',
    )
    resposta_processamento_markdown: str = Field(
        ...,
        description='Campo reservado para anotações do processamento, como erros, avisos ou informações adicionais conforme descrito no prompt. Deve ser preenchido com texto em Markdown.',
    )
    

